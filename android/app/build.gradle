def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    lintOptions {
        disable "InvalidPackage"
    }

    defaultConfig {
        applicationId "club.postdata.covid19cuba"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile keystoreProperties["storeFile"] ? file(keystoreProperties["storeFile"]) : null
            storePassword keystoreProperties["storePassword"]
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

flutter {
    source "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
    implementation "com.google.android.material:material:1.2.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"

    def mapsforgeVersion = "0.14.0"

    implementation "org.mapsforge:mapsforge-core:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map-reader:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-themes:$mapsforgeVersion"
    implementation "net.sf.kxml:kxml2:2.3.0"

    implementation "org.mapsforge:mapsforge-map-android:$mapsforgeVersion"
    implementation "com.caverock:androidsvg:1.4"

    implementation "org.mapsforge:mapsforge-core:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-poi:$mapsforgeVersion"

    implementation "org.mapsforge:mapsforge-poi-android:$mapsforgeVersion"
    implementation "org.mapsforge:sqlite-android:$mapsforgeVersion"
    implementation "org.mapsforge:sqlite-android:$mapsforgeVersion:natives-armeabi-v7a"
    implementation "org.mapsforge:sqlite-android:$mapsforgeVersion:natives-arm64-v8a"
    implementation "org.mapsforge:sqlite-android:$mapsforgeVersion:natives-x86"
    implementation "org.mapsforge:sqlite-android:$mapsforgeVersion:natives-x86_64"
}
